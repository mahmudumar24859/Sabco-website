import Link from 'next/link'
import Image from 'next/image'

export const revalidate = 300
const API = (process.env.NEXT_PUBLIC_API_BASE_URL || 'http://127.0.0.1:8000/api').replace(/\/$/, '')

async function fetchJson(path: string) {
  const res = await fetch(`${API}${path}`, { next: { revalidate: 300 } })
  if (!res.ok) return { results: [] }
  return res.json()
}

export const metadata = {
  title: 'Catalog',
  description: 'Explore Sabcoâ€™s precast and tile products: patterns, sizes, finishes, and spec sheets.',
  alternates: { canonical: '/catalog' },
}

export default async function CatalogPage({ searchParams }: { searchParams: { type?: string; category?: string } }) {
  const type = searchParams?.type || ''
  const category = searchParams?.category || ''

  const qs = new URLSearchParams()
  if (type) qs.set('type', type)
  if (category) qs.set('category__slug', category)

  const [catsRes, prodsRes] = await Promise.all([
    fetchJson('/product-categories/'),
    fetchJson(`/products/${qs.toString() ? `?${qs.toString()}` : ''}`),
  ])

  const categories = Array.isArray(catsRes) ? catsRes : (catsRes.results || [])
  const products = Array.isArray(prodsRes) ? prodsRes : (prodsRes.results || [])

  return (
    <div className="space-y-8">
      <h1 className="text-3xl font-bold">Catalog</h1>

      <form className="card flex flex-wrap gap-4 items-end" action="/catalog" method="get">
        <div>
          <label className="block text-sm">Type</label>
          <select name="type" defaultValue={type} className="border rounded px-3 py-2">
            <option value="">All</option>
            <option value="precast">Precast</option>
            <option value="tile">Tile</option>
          </select>
        </div>
        <div>
          <label className="block text-sm">Category</label>
          <select name="category" defaultValue={category} className="border rounded px-3 py-2">
            <option value="">All</option>
            {categories.map((c: any) => <option key={c.slug} value={c.slug}>{c.name}</option>)}
          </select>
        </div>
        <button className="btn btn-primary">Filter</button>
      </form>

      <div className="grid md:grid-cols-3 gap-6">
        {products.map((p: any) => (
          <Link key={p.slug} href={`/catalog/${p.slug}`} className="card hover:shadow-lg transition">
            <div className="relative w-full h-48 mb-3 rounded overflow-hidden bg-slate-100">
              {p.cover_image ? (
                <Image src={p.cover_image} alt={p.title} fill className="object-cover" sizes="(max-width: 768px) 100vw, 33vw" />
              ) : (
                <div className="flex items-center justify-center h-full text-slate-600">No image</div>
              )}
            </div>
            <h3 className="font-semibold text-lg">{p.title}</h3>
            <p className="text-sm text-slate-700 dark:text-slate-300">{p.category || p.type}</p>
          </Link>
        ))}
        {!products.length && <p className="text-slate-700 dark:text-slate-300">No products found.</p>}
      </div>
    </div>
  )
}